version: '3'

services:
  traefik:
    image: traefik:v2.10
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
    ports:
      - 80:80
      - 8080:8080 # Web UI Port
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - traefik.enable=true
      # Redirection from `http://xxx.com` to `http://xxx.com/foo`
      - traefik.http.routers.domain.entrypoints=web
      - traefik.http.routers.domain.rule=Path(`/`)
      - traefik.http.routers.domain.service=noop@internal
      - traefik.http.routers.domain.middlewares=to-foo@docker
      - traefik.http.middlewares.to-foo.redirectregex.permanent=true
      - traefik.http.middlewares.to-foo.redirectregex.regex=^http://([^/]+)/?$
      - traefik.http.middlewares.to-foo.redirectregex.replacement=http://$${1}/foo

  foo:
    image:  traefik/whoami:v1.10
    hostname: foo.com
    labels:
      - traefik.enable=true
      # just to ingress `http://xxx.com/foo`
      - traefik.http.routers.foo.entrypoints=web
      - traefik.http.routers.foo.rule=PathPrefix(`/foo`)

  bar:
    image:  traefik/whoami:v1.10
    hostname: bar.com
    labels:
      - traefik.enable=true
      # ingress `http://xxx.com/bar/xyz` and send `http://xxx.com/xyz` to `bar` service
      - traefik.http.routers.bar.entrypoints=web
      - traefik.http.routers.bar.rule=PathPrefix(`/bar`)
      - traefik.http.routers.bar.middlewares=bar-strip-prefix@docker
      - traefik.http.middlewares.bar-strip-prefix.stripprefix.prefixes=/bar

  bar12345:
    image:  traefik/whoami:v1.10
    hostname: bar12345.com
    environment:
      WHOAMI_PORT_NUMBER: 12345
    labels:
      - traefik.enable=true
      - traefik.http.routers.bar12345-router.entrypoints=web
      - traefik.http.routers.bar12345-router.rule=PathPrefix(`/bar12345`)
      # Tell Traefik that `myrouter` uses `myservice` as its service
      - traefik.http.routers.bar12345-router.service=bar12345-service
      # Tell Traefik to use the port 12345 to connect to `myservice` service
      - traefik.http.services.bar12345-service.loadbalancer.server.port=12345

  # Set up for two separate servers working in one container .
  web2ports:
    image: python:3.10
    ports:
      - 8001:8001
      - 8002:8002
    working_dir: /app
    volumes:
      - ./server_whoami.py:/app/server_whoami.py
    command: >
      sh -c "python3 server_whoami.py --port 8001 
      & python3 server_whoami.py --port 8002"
    labels:
      - traefik.enable=true
      # Specify more than one router and service per container
      - traefik.http.routers.a-router.entrypoints=web
      - traefik.http.routers.a-router.rule=PathPrefix(`/web2ports-a`)
      - traefik.http.routers.a-router.service=a-service
      - traefik.http.services.a-service.loadbalancer.server.port=8001
      - traefik.http.routers.b-router.entrypoints=web
      - traefik.http.routers.b-router.rule=PathPrefix(`/web2ports-b`)
      - traefik.http.routers.b-router.service=b-service
      - traefik.http.services.b-service.loadbalancer.server.port=8002